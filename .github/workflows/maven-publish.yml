name: Gradle Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.head_ref || github.ref }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v2

      - name: List gradle wrapper directory
        run: ls -la gradle/wrapper

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Get project version
        id: get_version
        run: |
          echo "PROJECT_VERSION=$(./gradlew properties -q | grep 'version:' | awk '{print $2}')" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ env.PROJECT_VERSION }}" >/dev/null 2>&1; then
            echo "Tag already exists, skipping publication."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag does not exist, proceeding with publication."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build and publish
        if: env.TAG_EXISTS == 'false'
        run: ./gradlew publishMavenJavaPublicationToGithubRepository
        env:
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}  # Your GitHub username or organization name
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # This is the GitHub token

      - name: Create GitHub Release
        if: env.TAG_EXISTS == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}
          draft: false
          prerelease: true

      - name: List build artifacts
        if: env.TAG_EXISTS == 'false'
        run: ls -la ./build/libs/

      - name: Upload JAR to GitHub Release
        if: env.TAG_EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/spark-${{ env.PROJECT_VERSION }}-dist.jar
          asset_name: spark-${{ env.PROJECT_VERSION }}-dist.jar
          asset_content_type: application/java-archive